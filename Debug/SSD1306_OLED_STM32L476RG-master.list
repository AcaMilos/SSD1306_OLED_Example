
SSD1306_OLED_STM32L476RG-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003598  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef8  08003ef8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003ef8  08003ef8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ef8  08003ef8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000014  08003f14  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08003f14  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbf6  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe0  00000000  00000000  0002bc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002dc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002e700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002607d  00000000  00000000  0002f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddd2  00000000  00000000  00055145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4b31  00000000  00000000  00062f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147a48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a68  00000000  00000000  00147a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003708 	.word	0x08003708

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003708 	.word	0x08003708

080001c8 <DISPLAY_Init>:





void DISPLAY_Init(I2C_HandleTypeDef* i2cHandler){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	/* LCD IS CONNECTED TO i2c-2 change this if you are using other ports */
	if(SSD1306_Init(i2cHandler) != SSD1306_OK){
 80001d0:	6878      	ldr	r0, [r7, #4]
 80001d2:	f000 fa87 	bl	80006e4 <SSD1306_Init>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b01      	cmp	r3, #1
		// ERROR!
		return;
	}
	else{
		// ALL IS FINE!
		return;
 80001da:	bf00      	nop
	}
}
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}

080001e2 <DISPLAY_Clear>:



void DISPLAY_Clear(void){
 80001e2:	b580      	push	{r7, lr}
 80001e4:	af00      	add	r7, sp, #0
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f000 fc7e 	bl	8000ae8 <SSD1306_Fill>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <DISPLAY_Write_No_Clear>:
	SSD1306_Update_Screen(i2cHandler);
}



void DISPLAY_Write_No_Clear(I2C_HandleTypeDef* i2cHandler, char* data , pixel_color_t color , uint8_t x , uint8_t y){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	4611      	mov	r1, r2
 80001fc:	461a      	mov	r2, r3
 80001fe:	460b      	mov	r3, r1
 8000200:	71fb      	strb	r3, [r7, #7]
 8000202:	4613      	mov	r3, r2
 8000204:	71bb      	strb	r3, [r7, #6]
	SSD1306_Go_To_XY (x , y);
 8000206:	79bb      	ldrb	r3, [r7, #6]
 8000208:	b29b      	uxth	r3, r3
 800020a:	7e3a      	ldrb	r2, [r7, #24]
 800020c:	b292      	uxth	r2, r2
 800020e:	4611      	mov	r1, r2
 8000210:	4618      	mov	r0, r3
 8000212:	f000 fcf9 	bl	8000c08 <SSD1306_Go_To_XY>
	SSD1306_Put_String(data , &font_7x10 , color == DISPLAY_PIXEL_BLUE ? SSD1306_COLOR_WHITE : SSD1306_COLOR_BLACK);
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2b00      	cmp	r3, #0
 800021a:	bf0c      	ite	eq
 800021c:	2301      	moveq	r3, #1
 800021e:	2300      	movne	r3, #0
 8000220:	b2db      	uxtb	r3, r3
 8000222:	461a      	mov	r2, r3
 8000224:	4905      	ldr	r1, [pc, #20]	; (800023c <DISPLAY_Write_No_Clear+0x4c>)
 8000226:	68b8      	ldr	r0, [r7, #8]
 8000228:	f000 fd8a 	bl	8000d40 <SSD1306_Put_String>
	SSD1306_Update_Screen(i2cHandler);
 800022c:	68f8      	ldr	r0, [r7, #12]
 800022e:	f000 fc0f 	bl	8000a50 <SSD1306_Update_Screen>
}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	20000000 	.word	0x20000000

08000240 <DISPLAY_Draw_Page>:



void DISPLAY_Draw_Page(I2C_HandleTypeDef* i2cHandler, page_container_t* container){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af02      	add	r7, sp, #8
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
	DISPLAY_Clear();
 800024a:	f7ff ffca 	bl	80001e2 <DISPLAY_Clear>
	DISPLAY_Write_No_Clear(i2cHandler, container->header , DISPLAY_PIXEL_BLUE , 5 , 5);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	6819      	ldr	r1, [r3, #0]
 8000252:	2305      	movs	r3, #5
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	2305      	movs	r3, #5
 8000258:	2200      	movs	r2, #0
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f7ff ffc8 	bl	80001f0 <DISPLAY_Write_No_Clear>
	DISPLAY_Write_No_Clear(i2cHandler, container->line_one , DISPLAY_PIXEL_BLUE , 5 , 20);
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	6859      	ldr	r1, [r3, #4]
 8000264:	2314      	movs	r3, #20
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	2305      	movs	r3, #5
 800026a:	2200      	movs	r2, #0
 800026c:	6878      	ldr	r0, [r7, #4]
 800026e:	f7ff ffbf 	bl	80001f0 <DISPLAY_Write_No_Clear>
	DISPLAY_Write_No_Clear(i2cHandler, container->line_two , DISPLAY_PIXEL_BLUE , 5 , 35);
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	6899      	ldr	r1, [r3, #8]
 8000276:	2323      	movs	r3, #35	; 0x23
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	2305      	movs	r3, #5
 800027c:	2200      	movs	r2, #0
 800027e:	6878      	ldr	r0, [r7, #4]
 8000280:	f7ff ffb6 	bl	80001f0 <DISPLAY_Write_No_Clear>
	DISPLAY_Write_No_Clear(i2cHandler, container->line_three , DISPLAY_PIXEL_BLUE , 5 , 50);
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	68d9      	ldr	r1, [r3, #12]
 8000288:	2332      	movs	r3, #50	; 0x32
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	2305      	movs	r3, #5
 800028e:	2200      	movs	r2, #0
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f7ff ffad 	bl	80001f0 <DISPLAY_Write_No_Clear>
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
	...

080002a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 030c 	add.w	r3, r7, #12
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b6:	4b35      	ldr	r3, [pc, #212]	; (800038c <MX_GPIO_Init+0xec>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a34      	ldr	r2, [pc, #208]	; (800038c <MX_GPIO_Init+0xec>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b32      	ldr	r3, [pc, #200]	; (800038c <MX_GPIO_Init+0xec>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0302 	and.w	r3, r3, #2
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <MX_GPIO_Init+0xec>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a2e      	ldr	r2, [pc, #184]	; (800038c <MX_GPIO_Init+0xec>)
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b2c      	ldr	r3, [pc, #176]	; (800038c <MX_GPIO_Init+0xec>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0304 	and.w	r3, r3, #4
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b29      	ldr	r3, [pc, #164]	; (800038c <MX_GPIO_Init+0xec>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	4a28      	ldr	r2, [pc, #160]	; (800038c <MX_GPIO_Init+0xec>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f2:	4b26      	ldr	r3, [pc, #152]	; (800038c <MX_GPIO_Init+0xec>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000304:	4822      	ldr	r0, [pc, #136]	; (8000390 <MX_GPIO_Init+0xf0>)
 8000306:	f001 f999 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f001 f992 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800031c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2300      	movs	r3, #0
 8000328:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032a:	f107 030c 	add.w	r3, r7, #12
 800032e:	4619      	mov	r1, r3
 8000330:	4817      	ldr	r0, [pc, #92]	; (8000390 <MX_GPIO_Init+0xf0>)
 8000332:	f000 ffd9 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000336:	f44f 7340 	mov.w	r3, #768	; 0x300
 800033a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800033c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000342:	2301      	movs	r3, #1
 8000344:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000346:	f107 030c 	add.w	r3, r7, #12
 800034a:	4619      	mov	r1, r3
 800034c:	4811      	ldr	r0, [pc, #68]	; (8000394 <MX_GPIO_Init+0xf4>)
 800034e:	f000 ffcb 	bl	80012e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000364:	f107 030c 	add.w	r3, r7, #12
 8000368:	4619      	mov	r1, r3
 800036a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036e:	f000 ffbb 	bl	80012e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000372:	2200      	movs	r2, #0
 8000374:	2100      	movs	r1, #0
 8000376:	2017      	movs	r0, #23
 8000378:	f000 ff7f 	bl	800127a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800037c:	2017      	movs	r0, #23
 800037e:	f000 ff98 	bl	80012b2 <HAL_NVIC_EnableIRQ>

}
 8000382:	bf00      	nop
 8000384:	3720      	adds	r7, #32
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000
 8000390:	48000400 	.word	0x48000400
 8000394:	48000800 	.word	0x48000800

08000398 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_9){
 80003a2:	88fb      	ldrh	r3, [r7, #6]
 80003a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003a8:	d105      	bne.n	80003b6 <HAL_GPIO_EXTI_Callback+0x1e>
		button1State = BUTTON_PRESSED;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	701a      	strb	r2, [r3, #0]
		button2State = BUTTON_RELEASED;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <HAL_GPIO_EXTI_Callback+0x44>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_8){
 80003b6:	88fb      	ldrh	r3, [r7, #6]
 80003b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003bc:	d105      	bne.n	80003ca <HAL_GPIO_EXTI_Callback+0x32>
			button2State = BUTTON_PRESSED;
 80003be:	4b07      	ldr	r3, [pc, #28]	; (80003dc <HAL_GPIO_EXTI_Callback+0x44>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
			button1State = BUTTON_RELEASED;
 80003c4:	4b04      	ldr	r3, [pc, #16]	; (80003d8 <HAL_GPIO_EXTI_Callback+0x40>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
		}
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000030 	.word	0x20000030
 80003dc:	20000031 	.word	0x20000031

080003e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_I2C2_Init+0x74>)
 80003e6:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <MX_I2C2_Init+0x78>)
 80003e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_I2C2_Init+0x74>)
 80003ec:	4a1b      	ldr	r2, [pc, #108]	; (800045c <MX_I2C2_Init+0x7c>)
 80003ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_I2C2_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_I2C2_Init+0x74>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_I2C2_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_I2C2_Init+0x74>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_I2C2_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_I2C2_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_I2C2_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800041a:	480e      	ldr	r0, [pc, #56]	; (8000454 <MX_I2C2_Init+0x74>)
 800041c:	f001 f93e 	bl	800169c <HAL_I2C_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000426:	f000 f92d 	bl	8000684 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800042a:	2100      	movs	r1, #0
 800042c:	4809      	ldr	r0, [pc, #36]	; (8000454 <MX_I2C2_Init+0x74>)
 800042e:	f001 fdbf 	bl	8001fb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000438:	f000 f924 	bl	8000684 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800043c:	2100      	movs	r1, #0
 800043e:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_I2C2_Init+0x74>)
 8000440:	f001 fe01 	bl	8002046 <HAL_I2CEx_ConfigDigitalFilter>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800044a:	f000 f91b 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000034 	.word	0x20000034
 8000458:	40005800 	.word	0x40005800
 800045c:	00303d5b 	.word	0x00303d5b

08000460 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b0ac      	sub	sp, #176	; 0xb0
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
 8000476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	2288      	movs	r2, #136	; 0x88
 800047e:	2100      	movs	r1, #0
 8000480:	4618      	mov	r0, r3
 8000482:	f003 f939 	bl	80036f8 <memset>
  if(i2cHandle->Instance==I2C2)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a22      	ldr	r2, [pc, #136]	; (8000514 <HAL_I2C_MspInit+0xb4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d13c      	bne.n	800050a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8000494:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000498:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 fc4a 	bl	8002d38 <HAL_RCCEx_PeriphCLKConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80004aa:	f000 f8eb 	bl	8000684 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ae:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <HAL_I2C_MspInit+0xb8>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	4a19      	ldr	r2, [pc, #100]	; (8000518 <HAL_I2C_MspInit+0xb8>)
 80004b4:	f043 0302 	orr.w	r3, r3, #2
 80004b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <HAL_I2C_MspInit+0xb8>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	613b      	str	r3, [r7, #16]
 80004c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80004c6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80004ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004ce:	2312      	movs	r3, #18
 80004d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004da:	2303      	movs	r3, #3
 80004dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80004e0:	2304      	movs	r3, #4
 80004e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80004ea:	4619      	mov	r1, r3
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <HAL_I2C_MspInit+0xbc>)
 80004ee:	f000 fefb 	bl	80012e8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <HAL_I2C_MspInit+0xb8>)
 80004f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_I2C_MspInit+0xb8>)
 80004f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004fc:	6593      	str	r3, [r2, #88]	; 0x58
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <HAL_I2C_MspInit+0xb8>)
 8000500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800050a:	bf00      	nop
 800050c:	37b0      	adds	r7, #176	; 0xb0
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40005800 	.word	0x40005800
 8000518:	40021000 	.word	0x40021000
 800051c:	48000400 	.word	0x48000400

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 fd52 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f83c 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f7ff feb8 	bl	80002a0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000530:	f7ff ff56 	bl	80003e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Find_Device_Address(&hi2c2);		// Finds SSD1306 OLED private address for I2C communication
 8000534:	4817      	ldr	r0, [pc, #92]	; (8000594 <main+0x74>)
 8000536:	f000 f8ab 	bl	8000690 <SSD1306_Find_Device_Address>
  DISPLAY_Init(&hi2c2);							// Initializes SSD1306 display to be ready for showing content
 800053a:	4816      	ldr	r0, [pc, #88]	; (8000594 <main+0x74>)
 800053c:	f7ff fe44 	bl	80001c8 <DISPLAY_Init>
  DISPLAY_Show_Test_Page(&hi2c2);					// Writing some example on SSD1306 display
 8000540:	4814      	ldr	r0, [pc, #80]	; (8000594 <main+0x74>)
 8000542:	f000 f881 	bl	8000648 <DISPLAY_Show_Test_Page>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(button1State == BUTTON_PRESSED){
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <main+0x78>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b01      	cmp	r3, #1
 800054e:	d10d      	bne.n	800056c <main+0x4c>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800055a:	f001 f86f 	bl	800163c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000564:	480d      	ldr	r0, [pc, #52]	; (800059c <main+0x7c>)
 8000566:	f001 f869 	bl	800163c <HAL_GPIO_WritePin>
 800056a:	e7ec      	b.n	8000546 <main+0x26>
	  }
	  else if(button2State == BUTTON_PRESSED){
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <main+0x80>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b01      	cmp	r3, #1
 8000574:	d1e7      	bne.n	8000546 <main+0x26>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000580:	f001 f85c 	bl	800163c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <main+0x7c>)
 800058c:	f001 f856 	bl	800163c <HAL_GPIO_WritePin>
	  if(button1State == BUTTON_PRESSED){
 8000590:	e7d9      	b.n	8000546 <main+0x26>
 8000592:	bf00      	nop
 8000594:	20000034 	.word	0x20000034
 8000598:	20000030 	.word	0x20000030
 800059c:	48000400 	.word	0x48000400
 80005a0:	20000031 	.word	0x20000031

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	; 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 f8a0 	bl	80036f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ca:	f001 fd97 	bl	80020fc <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 f856 	bl	8000684 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e2:	2310      	movs	r3, #16
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ea:	2302      	movs	r3, #2
 80005ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005f2:	230a      	movs	r3, #10
 80005f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fdce 	bl	80021a8 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000612:	f000 f837 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2303      	movs	r3, #3
 800061c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	2104      	movs	r1, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f996 	bl	8002960 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800063a:	f000 f823 	bl	8000684 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3758      	adds	r7, #88	; 0x58
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <DISPLAY_Show_Test_Page>:

/* USER CODE BEGIN 4 */

void DISPLAY_Show_Test_Page(I2C_HandleTypeDef* i2cHandler){
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	page_container_t container;
	container.header = "Naslov";
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <DISPLAY_Show_Test_Page+0x2c>)
 8000652:	60fb      	str	r3, [r7, #12]
	container.line_one = "Prvi red";
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <DISPLAY_Show_Test_Page+0x30>)
 8000656:	613b      	str	r3, [r7, #16]
	container.line_two = "Drugi red";
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <DISPLAY_Show_Test_Page+0x34>)
 800065a:	617b      	str	r3, [r7, #20]
	container.line_three = "Treci red";
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <DISPLAY_Show_Test_Page+0x38>)
 800065e:	61bb      	str	r3, [r7, #24]
	DISPLAY_Draw_Page(i2cHandler, &container);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4619      	mov	r1, r3
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f7ff fdea 	bl	8000240 <DISPLAY_Draw_Page>
}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	08003720 	.word	0x08003720
 8000678:	08003728 	.word	0x08003728
 800067c:	08003734 	.word	0x08003734
 8000680:	08003740 	.word	0x08003740

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <SSD1306_Find_Device_Address>:
 *
 * */



void SSD1306_Find_Device_Address(I2C_HandleTypeDef* i2cHandler){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	mySSD1306.device_address = 0;
 8000698:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <SSD1306_Find_Device_Address+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]

	while(mySSD1306.device_address < 128){
 800069e:	e013      	b.n	80006c8 <SSD1306_Find_Device_Address+0x38>
		if (HAL_I2C_IsDeviceReady(i2cHandler, mySSD1306.device_address, 1, 0x00000100) == HAL_OK){
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SSD1306_Find_Device_Address+0x50>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	b299      	uxth	r1, r3
 80006a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ac:	2201      	movs	r2, #1
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f001 f978 	bl	80019a4 <HAL_I2C_IsDeviceReady>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d00d      	beq.n	80006d6 <SSD1306_Find_Device_Address+0x46>
			break;
		}
		mySSD1306.device_address++;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <SSD1306_Find_Device_Address+0x50>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	3301      	adds	r3, #1
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <SSD1306_Find_Device_Address+0x50>)
 80006c6:	701a      	strb	r2, [r3, #0]
	while(mySSD1306.device_address < 128){
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <SSD1306_Find_Device_Address+0x50>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	dae5      	bge.n	80006a0 <SSD1306_Find_Device_Address+0x10>
	}
}
 80006d4:	e000      	b.n	80006d8 <SSD1306_Find_Device_Address+0x48>
			break;
 80006d6:	bf00      	nop
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000088 	.word	0x20000088

080006e4 <SSD1306_Init>:



uint8_t SSD1306_Init(I2C_HandleTypeDef* i2cHandler){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	/* This is done by i2c.c and i2c.h automatic generated files by STM32CubeMX
	 * and there is no necessary for us to do that here, and that's reason why above
	 * lines are commented. */

	/* Set default values */
	mySSD1306.currentX = 0;
 80006ec:	4ba4      	ldr	r3, [pc, #656]	; (8000980 <SSD1306_Init+0x29c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	805a      	strh	r2, [r3, #2]
	mySSD1306.currentY = 0;
 80006f2:	4ba3      	ldr	r3, [pc, #652]	; (8000980 <SSD1306_Init+0x29c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	809a      	strh	r2, [r3, #4]
	mySSD1306.initialized = 0;
 80006f8:	4ba1      	ldr	r3, [pc, #644]	; (8000980 <SSD1306_Init+0x29c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	71da      	strb	r2, [r3, #7]
	mySSD1306.inverted = 0;
 80006fe:	4ba0      	ldr	r3, [pc, #640]	; (8000980 <SSD1306_Init+0x29c>)
 8000700:	2200      	movs	r2, #0
 8000702:	719a      	strb	r2, [r3, #6]

	/* A little delay */
	uint32_t start_delay_iterator = 2500;
 8000704:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000708:	60fb      	str	r3, [r7, #12]
	while(start_delay_iterator > 0){
 800070a:	e002      	b.n	8000712 <SSD1306_Init+0x2e>
		start_delay_iterator--;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3b01      	subs	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
	while(start_delay_iterator > 0){
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d1f9      	bne.n	800070c <SSD1306_Init+0x28>
	 *	For more info consult: https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf
	 *	pages 28 to 32 contain tables with commands, and bellow is additional description of commands
	 *
	 *															// DEFAULT VALUES (after reset)
	 * */														// -	, single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xAE) != HAL_OK){	// Display OFF (sleep mode)
 8000718:	4b99      	ldr	r3, [pc, #612]	; (8000980 <SSD1306_Init+0x29c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	22ae      	movs	r2, #174	; 0xae
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 fb46 	bl	8000db6 <SSD1306_Send_Command>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SSD1306_Init+0x50>
		return SSD1306_ERROR;
 8000730:	2300      	movs	r3, #0
 8000732:	e187      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, double Byte command : first Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x20) != HAL_OK){ // Set Memory Addressing Mode (next sent command will adjust which one!)
 8000734:	4b92      	ldr	r3, [pc, #584]	; (8000980 <SSD1306_Init+0x29c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	b29b      	uxth	r3, r3
 800073c:	2220      	movs	r2, #32
 800073e:	4619      	mov	r1, r3
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f000 fb38 	bl	8000db6 <SSD1306_Send_Command>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SSD1306_Init+0x6c>
		return SSD1306_ERROR;
 800074c:	2300      	movs	r3, #0
 800074e:	e179      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0x10	, double Byte command : second Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x10) != HAL_OK){ // 00 = Horizontal Addressing Mode, 01 = Vertical Addressing Mode
 8000750:	4b8b      	ldr	r3, [pc, #556]	; (8000980 <SSD1306_Init+0x29c>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	b29b      	uxth	r3, r3
 8000758:	2210      	movs	r2, #16
 800075a:	4619      	mov	r1, r3
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 fb2a 	bl	8000db6 <SSD1306_Send_Command>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SSD1306_Init+0x88>
		return SSD1306_ERROR;														// 10,Page Addressing Mode (RESET), 11,Invalid
 8000768:	2300      	movs	r3, #0
 800076a:	e16b      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xB0) != HAL_OK){ // Set Page Start Address for Page Addressing Mode,0-7
 800076c:	4b84      	ldr	r3, [pc, #528]	; (8000980 <SSD1306_Init+0x29c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	b29b      	uxth	r3, r3
 8000774:	22b0      	movs	r2, #176	; 0xb0
 8000776:	4619      	mov	r1, r3
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 fb1c 	bl	8000db6 <SSD1306_Send_Command>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SSD1306_Init+0xa4>
		return SSD1306_ERROR;														// 0xB0 = PAGE0 , ... , 0xB7 = PAGE7
 8000784:	2300      	movs	r3, #0
 8000786:	e15d      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0xC0	, single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xC8) != HAL_OK){ // Set COM Output Scan Direction: 0xC8 = remapped mode, 0xC0 = normal mode
 8000788:	4b7d      	ldr	r3, [pc, #500]	; (8000980 <SSD1306_Init+0x29c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b29b      	uxth	r3, r3
 8000790:	22c8      	movs	r2, #200	; 0xc8
 8000792:	4619      	mov	r1, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fb0e 	bl	8000db6 <SSD1306_Send_Command>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SSD1306_Init+0xc0>
		return SSD1306_ERROR;														// For example, if this command is sent during normal display then the
 80007a0:	2300      	movs	r3, #0
 80007a2:	e14f      	b.n	8000a44 <SSD1306_Init+0x360>
																					// graphic display will be vertically flipped immediately
	}															// -	, single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x00) != HAL_OK){ // Sets lower nibble of column address (this command is only for page addressing mode)
 80007a4:	4b76      	ldr	r3, [pc, #472]	; (8000980 <SSD1306_Init+0x29c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f000 fb00 	bl	8000db6 <SSD1306_Send_Command>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SSD1306_Init+0xdc>
		return SSD1306_ERROR;														// in this case 0x00 will give 0000 nibble
 80007bc:	2300      	movs	r3, #0
 80007be:	e141      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x10) != HAL_OK){ // Set higher nibble of column address
 80007c0:	4b6f      	ldr	r3, [pc, #444]	; (8000980 <SSD1306_Init+0x29c>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	2210      	movs	r2, #16
 80007ca:	4619      	mov	r1, r3
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 faf2 	bl	8000db6 <SSD1306_Send_Command>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SSD1306_Init+0xf8>
		return SSD1306_ERROR;														// in this case 0x00 will give 0000 nibble
 80007d8:	2300      	movs	r3, #0
 80007da:	e133      	b.n	8000a44 <SSD1306_Init+0x360>
																					// which will result to COLUMN_0
	}															// 0x40	, single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x40) != HAL_OK){ // Set display start line - Set display RAM display start line register from
 80007dc:	4b68      	ldr	r3, [pc, #416]	; (8000980 <SSD1306_Init+0x29c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	2240      	movs	r2, #64	; 0x40
 80007e6:	4619      	mov	r1, r3
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 fae4 	bl	8000db6 <SSD1306_Send_Command>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SSD1306_Init+0x114>
		return SSD1306_ERROR;														// 0-63 using lower 6 bits of this command which are in this case = 00 0000b
 80007f4:	2300      	movs	r3, #0
 80007f6:	e125      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, double Byte command : first Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x81) != HAL_OK){ // Set contrast control with next command
 80007f8:	4b61      	ldr	r3, [pc, #388]	; (8000980 <SSD1306_Init+0x29c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	b29b      	uxth	r3, r3
 8000800:	2281      	movs	r2, #129	; 0x81
 8000802:	4619      	mov	r1, r3
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 fad6 	bl	8000db6 <SSD1306_Send_Command>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SSD1306_Init+0x130>
		return SSD1306_ERROR;
 8000810:	2300      	movs	r3, #0
 8000812:	e117      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0x7F	, double Byte command : second Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x7F) != HAL_OK){ // Contrast value (RESET = 0x7F)
 8000814:	4b5a      	ldr	r3, [pc, #360]	; (8000980 <SSD1306_Init+0x29c>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	b29b      	uxth	r3, r3
 800081c:	227f      	movs	r2, #127	; 0x7f
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f000 fac8 	bl	8000db6 <SSD1306_Send_Command>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SSD1306_Init+0x14c>
		return SSD1306_ERROR;														// as much this value is higher, contrast will be higher
 800082c:	2300      	movs	r3, #0
 800082e:	e109      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0xA0	, single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xA1) != HAL_OK){ // Set segment Re-map
 8000830:	4b53      	ldr	r3, [pc, #332]	; (8000980 <SSD1306_Init+0x29c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	b29b      	uxth	r3, r3
 8000838:	22a1      	movs	r2, #161	; 0xa1
 800083a:	4619      	mov	r1, r3
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 faba 	bl	8000db6 <SSD1306_Send_Command>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SSD1306_Init+0x168>
		return SSD1306_ERROR;														// 0xA1 = column address 127 will be mapped to SEG0
 8000848:	2300      	movs	r3, #0
 800084a:	e0fb      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0xA6	, single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xA6) != HAL_OK){ // Set normal/inverse display
 800084c:	4b4c      	ldr	r3, [pc, #304]	; (8000980 <SSD1306_Init+0x29c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	b29b      	uxth	r3, r3
 8000854:	22a6      	movs	r2, #166	; 0xa6
 8000856:	4619      	mov	r1, r3
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f000 faac 	bl	8000db6 <SSD1306_Send_Command>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SSD1306_Init+0x184>
		return SSD1306_ERROR;														// 0xA6 = Normal, 0xA7 = Inverse
 8000864:	2300      	movs	r3, #0
 8000866:	e0ed      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, double Byte command : first Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xA8) != HAL_OK){ // Set multiplex ratio (from 16 to 64, 0 to 15 are invalid)
 8000868:	4b45      	ldr	r3, [pc, #276]	; (8000980 <SSD1306_Init+0x29c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	b29b      	uxth	r3, r3
 8000870:	22a8      	movs	r2, #168	; 0xa8
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 fa9e 	bl	8000db6 <SSD1306_Send_Command>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SSD1306_Init+0x1a0>
		return SSD1306_ERROR;
 8000880:	2300      	movs	r3, #0
 8000882:	e0df      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0x3F	, double Byte command : second Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x3F) != HAL_OK){ // 0x3F = 63 decimally => MUX ratio =  64
 8000884:	4b3e      	ldr	r3, [pc, #248]	; (8000980 <SSD1306_Init+0x29c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	223f      	movs	r2, #63	; 0x3f
 800088e:	4619      	mov	r1, r3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f000 fa90 	bl	8000db6 <SSD1306_Send_Command>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SSD1306_Init+0x1bc>
		return SSD1306_ERROR;
 800089c:	2300      	movs	r3, #0
 800089e:	e0d1      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0xA4 , single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xA4) != HAL_OK){ //0xA4 = Output follows RAM content, 0xA5 = Output ignores RAM content (ENTIRE DISPLAY ON)
 80008a0:	4b37      	ldr	r3, [pc, #220]	; (8000980 <SSD1306_Init+0x29c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	22a4      	movs	r2, #164	; 0xa4
 80008aa:	4619      	mov	r1, r3
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 fa82 	bl	8000db6 <SSD1306_Send_Command>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SSD1306_Init+0x1d8>
		return SSD1306_ERROR;
 80008b8:	2300      	movs	r3, #0
 80008ba:	e0c3      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// It was just a try, and it works!!!!!
//	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xA5) != HAL_OK){ //0xA5 = Output ignores RAM content (ENTIRE DISPLAY ON)
//			return SSD1306_ERROR;
//	}
																// -	, double Byte command : first Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xD3) != HAL_OK){ // Set display offset: set vertical shift by COM from 0d~63d
 80008bc:	4b30      	ldr	r3, [pc, #192]	; (8000980 <SSD1306_Init+0x29c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	22d3      	movs	r2, #211	; 0xd3
 80008c6:	4619      	mov	r1, r3
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 fa74 	bl	8000db6 <SSD1306_Send_Command>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SSD1306_Init+0x1f4>
		return SSD1306_ERROR;
 80008d4:	2300      	movs	r3, #0
 80008d6:	e0b5      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0x00	, double Byte command : second Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x00) != HAL_OK){ // 0x00 = Not offset
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <SSD1306_Init+0x29c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	b29b      	uxth	r3, r3
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f000 fa66 	bl	8000db6 <SSD1306_Send_Command>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SSD1306_Init+0x210>
		return SSD1306_ERROR;
 80008f0:	2300      	movs	r3, #0
 80008f2:	e0a7      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, double Byte command : first Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xD5) != HAL_OK){ // Set display clock divide ratio/oscillator frequency
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <SSD1306_Init+0x29c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	22d5      	movs	r2, #213	; 0xd5
 80008fe:	4619      	mov	r1, r3
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f000 fa58 	bl	8000db6 <SSD1306_Send_Command>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SSD1306_Init+0x22c>
		return SSD1306_ERROR;
 800090c:	2300      	movs	r3, #0
 800090e:	e099      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0x80	, double Byte command : second Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xF0) != HAL_OK){ // divide ratio = 1, oscillator frequency = MAX
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <SSD1306_Init+0x29c>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	b29b      	uxth	r3, r3
 8000918:	22f0      	movs	r2, #240	; 0xf0
 800091a:	4619      	mov	r1, r3
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 fa4a 	bl	8000db6 <SSD1306_Send_Command>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SSD1306_Init+0x248>
		return SSD1306_ERROR;
 8000928:	2300      	movs	r3, #0
 800092a:	e08b      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, double Byte command : first Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xD9) != HAL_OK){ // Set pre-charge period
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <SSD1306_Init+0x29c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	b29b      	uxth	r3, r3
 8000934:	22d9      	movs	r2, #217	; 0xd9
 8000936:	4619      	mov	r1, r3
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 fa3c 	bl	8000db6 <SSD1306_Send_Command>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SSD1306_Init+0x264>
		return SSD1306_ERROR;
 8000944:	2300      	movs	r3, #0
 8000946:	e07d      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0x22	, double Byte command : second Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x22) != HAL_OK){ // phase1 and phase2 adjustment = by default
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <SSD1306_Init+0x29c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	b29b      	uxth	r3, r3
 8000950:	2222      	movs	r2, #34	; 0x22
 8000952:	4619      	mov	r1, r3
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 fa2e 	bl	8000db6 <SSD1306_Send_Command>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SSD1306_Init+0x280>
		return SSD1306_ERROR;
 8000960:	2300      	movs	r3, #0
 8000962:	e06f      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, double Byte command : first Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xDA) != HAL_OK){ // Set COM pins hardware configuration
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SSD1306_Init+0x29c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	b29b      	uxth	r3, r3
 800096c:	22da      	movs	r2, #218	; 0xda
 800096e:	4619      	mov	r1, r3
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa20 	bl	8000db6 <SSD1306_Send_Command>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d003      	beq.n	8000984 <SSD1306_Init+0x2a0>
		return SSD1306_ERROR;
 800097c:	2300      	movs	r3, #0
 800097e:	e061      	b.n	8000a44 <SSD1306_Init+0x360>
 8000980:	20000088 	.word	0x20000088
	}															// 0x12	, double Byte command : second Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x12) != HAL_OK){	// => alternative COM pin configuration, disable COM left/right re-map
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <SSD1306_Init+0x368>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	b29b      	uxth	r3, r3
 800098c:	2212      	movs	r2, #18
 800098e:	4619      	mov	r1, r3
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 fa10 	bl	8000db6 <SSD1306_Send_Command>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SSD1306_Init+0x2bc>
		return SSD1306_ERROR;
 800099c:	2300      	movs	r3, #0
 800099e:	e051      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, double Byte command : first Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xDB) != HAL_OK){ // Set Vcomh deselect level
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <SSD1306_Init+0x368>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	22db      	movs	r2, #219	; 0xdb
 80009aa:	4619      	mov	r1, r3
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 fa02 	bl	8000db6 <SSD1306_Send_Command>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SSD1306_Init+0x2d8>
		return SSD1306_ERROR;
 80009b8:	2300      	movs	r3, #0
 80009ba:	e043      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// 0x20	, double Byte command : second Byte
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x20) != HAL_OK){ // =>Vcomh deselect level = 0.77xVcc
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <SSD1306_Init+0x368>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	2220      	movs	r2, #32
 80009c6:	4619      	mov	r1, r3
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f000 f9f4 	bl	8000db6 <SSD1306_Send_Command>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SSD1306_Init+0x2f4>
		return SSD1306_ERROR;
 80009d4:	2300      	movs	r3, #0
 80009d6:	e035      	b.n	8000a44 <SSD1306_Init+0x360>
	}															//
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x8D) != HAL_OK){ //--set DC-DC enable
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <SSD1306_Init+0x368>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	b29b      	uxth	r3, r3
 80009e0:	228d      	movs	r2, #141	; 0x8d
 80009e2:	4619      	mov	r1, r3
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f9e6 	bl	8000db6 <SSD1306_Send_Command>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SSD1306_Init+0x310>
		return SSD1306_ERROR;
 80009f0:	2300      	movs	r3, #0
 80009f2:	e027      	b.n	8000a44 <SSD1306_Init+0x360>
	}															//
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x14) != HAL_OK){ //
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SSD1306_Init+0x368>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	2214      	movs	r2, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f000 f9d8 	bl	8000db6 <SSD1306_Send_Command>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SSD1306_Init+0x32c>
		return SSD1306_ERROR;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e019      	b.n	8000a44 <SSD1306_Init+0x360>
	}															// -	, single command
	if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xAF) != HAL_OK){ // Turn on SSD1306 panel
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <SSD1306_Init+0x368>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	22af      	movs	r2, #175	; 0xaf
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 f9ca 	bl	8000db6 <SSD1306_Send_Command>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SSD1306_Init+0x348>
		return SSD1306_ERROR;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e00b      	b.n	8000a44 <SSD1306_Init+0x360>



	/* Clear screen */
	//SSD1306_Fill(SSD1306_COLOR_BLACK);
	SSD1306_Fill(SSD1306_COLOR_WHITE);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 f85b 	bl	8000ae8 <SSD1306_Fill>
	/* Update screen */
	SSD1306_Update_Screen(i2cHandler);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f80c 	bl	8000a50 <SSD1306_Update_Screen>


	/* After initialization if all commands have passed we can assume that SSD1306 OLED is initalized. */
	mySSD1306.initialized = 0x01;
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SSD1306_Init+0x368>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	71da      	strb	r2, [r3, #7]

	return mySSD1306.initialized;	// returning "0x01" as symbol that intialiyation have passed successfully
 8000a3e:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <SSD1306_Init+0x368>)
 8000a40:	79db      	ldrb	r3, [r3, #7]
 8000a42:	b2db      	uxtb	r3, r3
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000088 	.word	0x20000088

08000a50 <SSD1306_Update_Screen>:



void SSD1306_Update_Screen(I2C_HandleTypeDef* i2cHandler) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e033      	b.n	8000ac6 <SSD1306_Update_Screen+0x76>
		/* This Code is following datasheet on page 34 */
		if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xB0 + m) != HAL_OK){
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <SSD1306_Update_Screen+0x90>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	b299      	uxth	r1, r3
 8000a66:	7bfb      	ldrb	r3, [r7, #15]
 8000a68:	3b50      	subs	r3, #80	; 0x50
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f9a1 	bl	8000db6 <SSD1306_Send_Command>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d129      	bne.n	8000ace <SSD1306_Update_Screen+0x7e>
			return;
		}
		if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x00) != HAL_OK){
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <SSD1306_Update_Screen+0x90>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f995 	bl	8000db6 <SSD1306_Send_Command>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d11f      	bne.n	8000ad2 <SSD1306_Update_Screen+0x82>
			return;
		}
		if(SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0x10) != HAL_OK){
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <SSD1306_Update_Screen+0x90>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	2210      	movs	r2, #16
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f989 	bl	8000db6 <SSD1306_Send_Command>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d115      	bne.n	8000ad6 <SSD1306_Update_Screen+0x86>
			return;
		}

		/* Write multi data */
		SSD1306_I2C_Write_Multi(i2cHandler, mySSD1306.device_address, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <SSD1306_Update_Screen+0x90>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2d9      	uxtb	r1, r3
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	01db      	lsls	r3, r3, #7
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <SSD1306_Update_Screen+0x94>)
 8000ab6:	441a      	add	r2, r3
 8000ab8:	2380      	movs	r3, #128	; 0x80
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f965 	bl	8000d8a <SSD1306_I2C_Write_Multi>
	for (m = 0; m < 8; m++) {
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	2b07      	cmp	r3, #7
 8000aca:	d9c8      	bls.n	8000a5e <SSD1306_Update_Screen+0xe>
 8000acc:	e004      	b.n	8000ad8 <SSD1306_Update_Screen+0x88>
			return;
 8000ace:	bf00      	nop
 8000ad0:	e002      	b.n	8000ad8 <SSD1306_Update_Screen+0x88>
			return;
 8000ad2:	bf00      	nop
 8000ad4:	e000      	b.n	8000ad8 <SSD1306_Update_Screen+0x88>
			return;
 8000ad6:	bf00      	nop
	}
}
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000088 	.word	0x20000088
 8000ae4:	20000090 	.word	0x20000090

08000ae8 <SSD1306_Fill>:
	}
}



void SSD1306_Fill(SSD1306_color_t color) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	if (color == SSD1306_COLOR_BLACK){
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d10f      	bne.n	8000b18 <SSD1306_Fill+0x30>
		for(int i = 0; i < sizeof(SSD1306_Buffer); i++){
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	e007      	b.n	8000b0e <SSD1306_Fill+0x26>
			SSD1306_Buffer[i] = 0x00;
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <SSD1306_Fill+0x5c>)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < sizeof(SSD1306_Buffer); i++){
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b14:	d3f3      	bcc.n	8000afe <SSD1306_Fill+0x16>
	else{
		for(int i = 0; i < sizeof(SSD1306_Buffer); i++){
			SSD1306_Buffer[i] = 0xFF;
		}
	}
}
 8000b16:	e00e      	b.n	8000b36 <SSD1306_Fill+0x4e>
		for(int i = 0; i < sizeof(SSD1306_Buffer); i++){
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	e007      	b.n	8000b2e <SSD1306_Fill+0x46>
			SSD1306_Buffer[i] = 0xFF;
 8000b1e:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <SSD1306_Fill+0x5c>)
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4413      	add	r3, r2
 8000b24:	22ff      	movs	r2, #255	; 0xff
 8000b26:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < sizeof(SSD1306_Buffer); i++){
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b34:	d3f3      	bcc.n	8000b1e <SSD1306_Fill+0x36>
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000090 	.word	0x20000090

08000b48 <SSD1306_Draw_Pixel>:



void SSD1306_Draw_Pixel(uint16_t x, uint16_t y, SSD1306_color_t color) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
 8000b52:	460b      	mov	r3, r1
 8000b54:	80bb      	strh	r3, [r7, #4]
 8000b56:	4613      	mov	r3, r2
 8000b58:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b5e:	d849      	bhi.n	8000bf4 <SSD1306_Draw_Pixel+0xac>
 8000b60:	88bb      	ldrh	r3, [r7, #4]
 8000b62:	2b3f      	cmp	r3, #63	; 0x3f
 8000b64:	d846      	bhi.n	8000bf4 <SSD1306_Draw_Pixel+0xac>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (mySSD1306.inverted) {
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <SSD1306_Draw_Pixel+0xb8>)
 8000b68:	799b      	ldrb	r3, [r3, #6]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <SSD1306_Draw_Pixel+0x36>
		color = (SSD1306_color_t)!color;
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bf0c      	ite	eq
 8000b76:	2301      	moveq	r3, #1
 8000b78:	2300      	movne	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d11a      	bne.n	8000bba <SSD1306_Draw_Pixel+0x72>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b84:	88fa      	ldrh	r2, [r7, #6]
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	b298      	uxth	r0, r3
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	01db      	lsls	r3, r3, #7
 8000b90:	4413      	add	r3, r2
 8000b92:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <SSD1306_Draw_Pixel+0xbc>)
 8000b94:	5cd3      	ldrb	r3, [r2, r3]
 8000b96:	b25a      	sxtb	r2, r3
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	b259      	sxtb	r1, r3
 8000baa:	88fa      	ldrh	r2, [r7, #6]
 8000bac:	4603      	mov	r3, r0
 8000bae:	01db      	lsls	r3, r3, #7
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b2c9      	uxtb	r1, r1
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <SSD1306_Draw_Pixel+0xbc>)
 8000bb6:	54d1      	strb	r1, [r2, r3]
 8000bb8:	e01d      	b.n	8000bf6 <SSD1306_Draw_Pixel+0xae>
	}
	else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	88bb      	ldrh	r3, [r7, #4]
 8000bbe:	08db      	lsrs	r3, r3, #3
 8000bc0:	b298      	uxth	r0, r3
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	01db      	lsls	r3, r3, #7
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <SSD1306_Draw_Pixel+0xbc>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	b25a      	sxtb	r2, r3
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	b25b      	sxtb	r3, r3
 8000be0:	4013      	ands	r3, r2
 8000be2:	b259      	sxtb	r1, r3
 8000be4:	88fa      	ldrh	r2, [r7, #6]
 8000be6:	4603      	mov	r3, r0
 8000be8:	01db      	lsls	r3, r3, #7
 8000bea:	4413      	add	r3, r2
 8000bec:	b2c9      	uxtb	r1, r1
 8000bee:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <SSD1306_Draw_Pixel+0xbc>)
 8000bf0:	54d1      	strb	r1, [r2, r3]
 8000bf2:	e000      	b.n	8000bf6 <SSD1306_Draw_Pixel+0xae>
		return;
 8000bf4:	bf00      	nop
	}
}
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	20000088 	.word	0x20000088
 8000c04:	20000090 	.word	0x20000090

08000c08 <SSD1306_Go_To_XY>:



void SSD1306_Go_To_XY(uint16_t x, uint16_t y) {
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	80fb      	strh	r3, [r7, #6]
 8000c14:	4613      	mov	r3, r2
 8000c16:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	mySSD1306.currentX = x;
 8000c18:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <SSD1306_Go_To_XY+0x28>)
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	8053      	strh	r3, [r2, #2]
	mySSD1306.currentY = y;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <SSD1306_Go_To_XY+0x28>)
 8000c20:	88bb      	ldrh	r3, [r7, #4]
 8000c22:	8093      	strh	r3, [r2, #4]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	20000088 	.word	0x20000088

08000c34 <SSD1306_Put_Char>:



char SSD1306_Put_Char(char ch, font_t* font, SSD1306_color_t color) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (mySSD1306.currentX + font->font_width) ||
 8000c44:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <SSD1306_Put_Char+0x108>)
 8000c46:	885b      	ldrh	r3, [r3, #2]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4413      	add	r3, r2
	if (
 8000c52:	2b7f      	cmp	r3, #127	; 0x7f
 8000c54:	dc08      	bgt.n	8000c68 <SSD1306_Put_Char+0x34>
		SSD1306_HEIGHT <= (mySSD1306.currentY + font->font_height)
 8000c56:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <SSD1306_Put_Char+0x108>)
 8000c58:	889b      	ldrh	r3, [r3, #4]
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	785b      	ldrb	r3, [r3, #1]
 8000c62:	4413      	add	r3, r2
		SSD1306_WIDTH <= (mySSD1306.currentX + font->font_width) ||
 8000c64:	2b3f      	cmp	r3, #63	; 0x3f
 8000c66:	dd01      	ble.n	8000c6c <SSD1306_Put_Char+0x38>
	) {
		/* Error */
		return 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e063      	b.n	8000d34 <SSD1306_Put_Char+0x100>
	}

	/* Go through font */
	for (i = 0; i < font->font_height; i++) {
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	e04f      	b.n	8000d12 <SSD1306_Put_Char+0xde>
		b = font->data[(ch - 32) * font->font_height + i];
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	3b20      	subs	r3, #32
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	7849      	ldrb	r1, [r1, #1]
 8000c7e:	fb01 f303 	mul.w	r3, r1, r3
 8000c82:	4619      	mov	r1, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	440b      	add	r3, r1
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < font->font_width; j++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	e034      	b.n	8000d00 <SSD1306_Put_Char+0xcc>
			if ((b << j) & 0x8000) {
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d012      	beq.n	8000ccc <SSD1306_Put_Char+0x98>
				SSD1306_Draw_Pixel(mySSD1306.currentX + j, (mySSD1306.currentY + i), (SSD1306_color_t) color);
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <SSD1306_Put_Char+0x108>)
 8000ca8:	885b      	ldrh	r3, [r3, #2]
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b298      	uxth	r0, r3
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <SSD1306_Put_Char+0x108>)
 8000cb6:	889b      	ldrh	r3, [r3, #4]
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	79ba      	ldrb	r2, [r7, #6]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f7ff ff3f 	bl	8000b48 <SSD1306_Draw_Pixel>
 8000cca:	e016      	b.n	8000cfa <SSD1306_Put_Char+0xc6>
			} else {
				SSD1306_Draw_Pixel(mySSD1306.currentX + j, (mySSD1306.currentY + i), (SSD1306_color_t)!color);
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <SSD1306_Put_Char+0x108>)
 8000cce:	885b      	ldrh	r3, [r3, #2]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b298      	uxth	r0, r3
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <SSD1306_Put_Char+0x108>)
 8000cdc:	889b      	ldrh	r3, [r3, #4]
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bf0c      	ite	eq
 8000cee:	2301      	moveq	r3, #1
 8000cf0:	2300      	movne	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	f7ff ff27 	bl	8000b48 <SSD1306_Draw_Pixel>
		for (j = 0; j < font->font_width; j++) {
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d3c4      	bcc.n	8000c96 <SSD1306_Put_Char+0x62>
	for (i = 0; i < font->font_height; i++) {
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	785b      	ldrb	r3, [r3, #1]
 8000d16:	461a      	mov	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d3a9      	bcc.n	8000c72 <SSD1306_Put_Char+0x3e>
			}
		}
	}

	/* Increase pointer */
	mySSD1306.currentX += font->font_width;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <SSD1306_Put_Char+0x108>)
 8000d20:	885b      	ldrh	r3, [r3, #2]
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	4413      	add	r3, r2
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <SSD1306_Put_Char+0x108>)
 8000d30:	805a      	strh	r2, [r3, #2]

	/* Return character written */
	return ch;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000088 	.word	0x20000088

08000d40 <SSD1306_Put_String>:



char SSD1306_Put_String(char* str, font_t* font, SSD1306_color_t color){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000d4e:	e012      	b.n	8000d76 <SSD1306_Put_String+0x36>
		/* Write character by character */
		if (SSD1306_Put_Char(*str, font, color) != *str) {
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	79fa      	ldrb	r2, [r7, #7]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff6b 	bl	8000c34 <SSD1306_Put_Char>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d002      	beq.n	8000d70 <SSD1306_Put_String+0x30>
			/* Return error */
			return *str;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	e008      	b.n	8000d82 <SSD1306_Put_String+0x42>
		}

		/* Increase string pointer */
		str++;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3301      	adds	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1e8      	bne.n	8000d50 <SSD1306_Put_String+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	781b      	ldrb	r3, [r3, #0]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <SSD1306_I2C_Write_Multi>:
	}
}



void SSD1306_I2C_Write_Multi(I2C_HandleTypeDef* i2cHandler, uint8_t device_address, uint8_t* data, uint16_t count){
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	461a      	mov	r2, r3
 8000d96:	460b      	mov	r3, r1
 8000d98:	72fb      	strb	r3, [r7, #11]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	813b      	strh	r3, [r7, #8]
	if (SSD1306_Send_Data(i2cHandler, device_address, data, count) != HAL_OK){
 8000d9e:	7afb      	ldrb	r3, [r7, #11]
 8000da0:	b299      	uxth	r1, r3
 8000da2:	893b      	ldrh	r3, [r7, #8]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 f824 	bl	8000df4 <SSD1306_Send_Data>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
		return;
	}
}
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <SSD1306_Send_Command>:
	SSD1306_Send_Command(i2cHandler, mySSD1306.device_address, 0xAE);
}



uint8_t SSD1306_Send_Command(I2C_HandleTypeDef* i2cHandler, uint16_t device_address, uint8_t command){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af02      	add	r7, sp, #8
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	807b      	strh	r3, [r7, #2]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	707b      	strb	r3, [r7, #1]
//	uint8_t* command_ptr;
//	*(command_ptr) = 0x00;
//	*(command_ptr + 1) = command;
	uint8_t command_buff[2];
	command_buff[0] = 0x00;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	733b      	strb	r3, [r7, #12]
	command_buff[1] = command;
 8000dca:	787b      	ldrb	r3, [r7, #1]
 8000dcc:	737b      	strb	r3, [r7, #13]
	uint8_t command_status = 0x03;	/* If nothing responds at HAL_I2C_Master_Transmit, but it will always I assume, this will be return value. */
 8000dce:	2303      	movs	r3, #3
 8000dd0:	73fb      	strb	r3, [r7, #15]

	command_status = HAL_I2C_Master_Transmit(i2cHandler, device_address, command_buff, 0x0002, SSD1306_I2C_TIMEOUT);
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	8879      	ldrh	r1, [r7, #2]
 8000dd8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2302      	movs	r3, #2
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 fceb 	bl	80017bc <HAL_I2C_Master_Transmit>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]
	return command_status;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <SSD1306_Send_Data>:



uint8_t SSD1306_Send_Data(I2C_HandleTypeDef* i2cHandler, uint16_t device_address, uint8_t* data, uint16_t count){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	460b      	mov	r3, r1
 8000e02:	817b      	strh	r3, [r7, #10]
 8000e04:	4613      	mov	r3, r2
 8000e06:	813b      	strh	r3, [r7, #8]

	uint8_t command_status = SSD1306_ERROR;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	75fb      	strb	r3, [r7, #23]

	if(count == SSD1306_WIDTH){
 8000e0c:	893b      	ldrh	r3, [r7, #8]
 8000e0e:	2b80      	cmp	r3, #128	; 0x80
 8000e10:	d109      	bne.n	8000e26 <SSD1306_Send_Data+0x32>
		command_status = SSD1306_Send_Row_Data(i2cHandler, device_address, data);
 8000e12:	897b      	ldrh	r3, [r7, #10]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4619      	mov	r1, r3
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f000 f809 	bl	8000e30 <SSD1306_Send_Row_Data>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	75fb      	strb	r3, [r7, #23]
		return command_status;
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	e000      	b.n	8000e28 <SSD1306_Send_Data+0x34>
	}
	else{
		return SSD1306_ERROR;
 8000e26:	2300      	movs	r3, #0
//		uint8_t command_status = 0x03;	/* If nothing responds at HAL_I2C_Master_Transmit, but it will always I assume, this will be return value. */
//
//		command_status = HAL_I2C_Master_Transmit(i2cHandler, device_address, data_buff, count + 1, SSD1306_I2C_TIMEOUT);
//		return command_status;
	}
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <SSD1306_Send_Row_Data>:



uint8_t SSD1306_Send_Row_Data(I2C_HandleTypeDef* i2cHandler, uint16_t device_address, uint8_t* data){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0a8      	sub	sp, #160	; 0xa0
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	817b      	strh	r3, [r7, #10]
//		}
//	}
//	return SSD1306_OK;

	uint8_t data_buff[SSD1306_WIDTH+1];
	data_buff[0] = 0x40;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	743b      	strb	r3, [r7, #16]
	for(int i = 0; i < SSD1306_WIDTH; i++){
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000e48:	e010      	b.n	8000e6c <SSD1306_Send_Row_Data+0x3c>
		data_buff[i + 1] = *(data + i);
 8000e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	441a      	add	r2, r3
 8000e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e56:	3301      	adds	r3, #1
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	3398      	adds	r3, #152	; 0x98
 8000e5c:	443b      	add	r3, r7
 8000e5e:	f803 2c88 	strb.w	r2, [r3, #-136]
	for(int i = 0; i < SSD1306_WIDTH; i++){
 8000e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e66:	3301      	adds	r3, #1
 8000e68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000e6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000e70:	2b7f      	cmp	r3, #127	; 0x7f
 8000e72:	ddea      	ble.n	8000e4a <SSD1306_Send_Row_Data+0x1a>
	}

	uint8_t command_status = 0x03;	/* If nothing responds at HAL_I2C_Master_Transmit, but it will always I assume, this will be return value. */
 8000e74:	2303      	movs	r3, #3
 8000e76:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	command_status = HAL_I2C_Master_Transmit(i2cHandler, device_address, data_buff, SSD1306_WIDTH + 1, SSD1306_I2C_TIMEOUT);
 8000e7a:	f107 0210 	add.w	r2, r7, #16
 8000e7e:	8979      	ldrh	r1, [r7, #10]
 8000e80:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2381      	movs	r3, #129	; 0x81
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 fc97 	bl	80017bc <HAL_I2C_Master_Transmit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	return command_status;
 8000e94:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3798      	adds	r7, #152	; 0x98
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f8a6 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f44:	f000 fb92 	bl	800166c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000f48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f4c:	f000 fb8e 	bl	800166c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f7c:	f7ff ffea 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	; (8000fb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	; (8000fc4 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f002 fb83 	bl	80036b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000faa:	f7ff fab9 	bl	8000520 <main>

08000fae <LoopForever>:

LoopForever:
    b LoopForever
 8000fae:	e7fe      	b.n	8000fae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fbc:	08003f00 	.word	0x08003f00
  ldr r2, =_sbss
 8000fc0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fc4:	20000494 	.word	0x20000494

08000fc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC1_2_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <HAL_Init+0x3c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <HAL_Init+0x3c>)
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f000 f93e 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f000 f80f 	bl	800100c <HAL_InitTick>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	71fb      	strb	r3, [r7, #7]
 8000ff8:	e001      	b.n	8000ffe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ffa:	f7ff ff51 	bl	8000ea0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001018:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_InitTick+0x6c>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d023      	beq.n	8001068 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_InitTick+0x70>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_InitTick+0x6c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f949 	bl	80012ce <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10f      	bne.n	8001062 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d809      	bhi.n	800105c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f913 	bl	800127a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_InitTick+0x74>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e007      	b.n	800106c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	73fb      	strb	r3, [r7, #15]
 8001060:	e004      	b.n	800106c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]
 8001066:	e001      	b.n	800106c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000010 	.word	0x20000010
 800107c:	20000008 	.word	0x20000008
 8001080:	2000000c 	.word	0x2000000c

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000010 	.word	0x20000010
 80010a8:	20000490 	.word	0x20000490

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000490 	.word	0x20000490

080010c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e0:	4013      	ands	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <__NVIC_SetPriorityGrouping+0x44>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <__NVIC_GetPriorityGrouping+0x18>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	f003 0307 	and.w	r3, r3, #7
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db0b      	blt.n	8001152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	f003 021f 	and.w	r2, r3, #31
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <__NVIC_EnableIRQ+0x38>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	095b      	lsrs	r3, r3, #5
 8001148:	2001      	movs	r0, #1
 800114a:	fa00 f202 	lsl.w	r2, r0, r2
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff29 	bl	80010c4 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff3e 	bl	800110c <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff31 	bl	8001128 <__NVIC_EnableIRQ>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffa2 	bl	8001220 <SysTick_Config>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f6:	e17f      	b.n	80015f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	2101      	movs	r1, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	4013      	ands	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8171 	beq.w	80015f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d005      	beq.n	8001328 <HAL_GPIO_Init+0x40>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4013      	ands	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d118      	bne.n	80013c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800139c:	2201      	movs	r2, #1
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	08db      	lsrs	r3, r3, #3
 80013b2:	f003 0201 	and.w	r2, r3, #1
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d017      	beq.n	8001404 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d123      	bne.n	8001458 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3208      	adds	r2, #8
 8001418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	691a      	ldr	r2, [r3, #16]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	08da      	lsrs	r2, r3, #3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3208      	adds	r2, #8
 8001452:	6939      	ldr	r1, [r7, #16]
 8001454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4013      	ands	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 0203 	and.w	r2, r3, #3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80ac 	beq.w	80015f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <HAL_GPIO_Init+0x330>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149e:	4a5e      	ldr	r2, [pc, #376]	; (8001618 <HAL_GPIO_Init+0x330>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6613      	str	r3, [r2, #96]	; 0x60
 80014a6:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <HAL_GPIO_Init+0x330>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b2:	4a5a      	ldr	r2, [pc, #360]	; (800161c <HAL_GPIO_Init+0x334>)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014dc:	d025      	beq.n	800152a <HAL_GPIO_Init+0x242>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a4f      	ldr	r2, [pc, #316]	; (8001620 <HAL_GPIO_Init+0x338>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01f      	beq.n	8001526 <HAL_GPIO_Init+0x23e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a4e      	ldr	r2, [pc, #312]	; (8001624 <HAL_GPIO_Init+0x33c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d019      	beq.n	8001522 <HAL_GPIO_Init+0x23a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <HAL_GPIO_Init+0x340>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d013      	beq.n	800151e <HAL_GPIO_Init+0x236>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a4c      	ldr	r2, [pc, #304]	; (800162c <HAL_GPIO_Init+0x344>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d00d      	beq.n	800151a <HAL_GPIO_Init+0x232>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a4b      	ldr	r2, [pc, #300]	; (8001630 <HAL_GPIO_Init+0x348>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d007      	beq.n	8001516 <HAL_GPIO_Init+0x22e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4a      	ldr	r2, [pc, #296]	; (8001634 <HAL_GPIO_Init+0x34c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d101      	bne.n	8001512 <HAL_GPIO_Init+0x22a>
 800150e:	2306      	movs	r3, #6
 8001510:	e00c      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001512:	2307      	movs	r3, #7
 8001514:	e00a      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001516:	2305      	movs	r3, #5
 8001518:	e008      	b.n	800152c <HAL_GPIO_Init+0x244>
 800151a:	2304      	movs	r3, #4
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x244>
 800151e:	2303      	movs	r3, #3
 8001520:	e004      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001522:	2302      	movs	r3, #2
 8001524:	e002      	b.n	800152c <HAL_GPIO_Init+0x244>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_GPIO_Init+0x244>
 800152a:	2300      	movs	r3, #0
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	f002 0203 	and.w	r2, r2, #3
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	4093      	lsls	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800153c:	4937      	ldr	r1, [pc, #220]	; (800161c <HAL_GPIO_Init+0x334>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <HAL_GPIO_Init+0x350>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800156e:	4a32      	ldr	r2, [pc, #200]	; (8001638 <HAL_GPIO_Init+0x350>)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001574:	4b30      	ldr	r3, [pc, #192]	; (8001638 <HAL_GPIO_Init+0x350>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001598:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_GPIO_Init+0x350>)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_GPIO_Init+0x350>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c2:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <HAL_GPIO_Init+0x350>)
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <HAL_GPIO_Init+0x350>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <HAL_GPIO_Init+0x350>)
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	f47f ae78 	bne.w	80012f8 <HAL_GPIO_Init+0x10>
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	371c      	adds	r7, #28
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40010000 	.word	0x40010000
 8001620:	48000400 	.word	0x48000400
 8001624:	48000800 	.word	0x48000800
 8001628:	48000c00 	.word	0x48000c00
 800162c:	48001000 	.word	0x48001000
 8001630:	48001400 	.word	0x48001400
 8001634:	48001800 	.word	0x48001800
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001658:	e002      	b.n	8001660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fe84 	bl	8000398 <HAL_GPIO_EXTI_Callback>
  }
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e081      	b.n	80017b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d106      	bne.n	80016c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7fe fecc 	bl	8000460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2224      	movs	r2, #36	; 0x24
 80016cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	e006      	b.n	8001724 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001722:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d104      	bne.n	8001736 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001734:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001748:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001758:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69d9      	ldr	r1, [r3, #28]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1a      	ldr	r2, [r3, #32]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0201 	orr.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2220      	movs	r2, #32
 800179e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	461a      	mov	r2, r3
 80017c8:	460b      	mov	r3, r1
 80017ca:	817b      	strh	r3, [r7, #10]
 80017cc:	4613      	mov	r3, r2
 80017ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b20      	cmp	r3, #32
 80017da:	f040 80da 	bne.w	8001992 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_I2C_Master_Transmit+0x30>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e0d3      	b.n	8001994 <HAL_I2C_Master_Transmit+0x1d8>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017f4:	f7ff fc5a 	bl	80010ac <HAL_GetTick>
 80017f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2319      	movs	r3, #25
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 f9f7 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0be      	b.n	8001994 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2221      	movs	r2, #33	; 0x21
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2210      	movs	r2, #16
 8001822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	893a      	ldrh	r2, [r7, #8]
 8001836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001842:	b29b      	uxth	r3, r3
 8001844:	2bff      	cmp	r3, #255	; 0xff
 8001846:	d90e      	bls.n	8001866 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	22ff      	movs	r2, #255	; 0xff
 800184c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001852:	b2da      	uxtb	r2, r3
 8001854:	8979      	ldrh	r1, [r7, #10]
 8001856:	4b51      	ldr	r3, [pc, #324]	; (800199c <HAL_I2C_Master_Transmit+0x1e0>)
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 fb74 	bl	8001f4c <I2C_TransferConfig>
 8001864:	e06c      	b.n	8001940 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186a:	b29a      	uxth	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001874:	b2da      	uxtb	r2, r3
 8001876:	8979      	ldrh	r1, [r7, #10]
 8001878:	4b48      	ldr	r3, [pc, #288]	; (800199c <HAL_I2C_Master_Transmit+0x1e0>)
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 fb63 	bl	8001f4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001886:	e05b      	b.n	8001940 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	6a39      	ldr	r1, [r7, #32]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f9f4 	bl	8001c7a <I2C_WaitOnTXISFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e07b      	b.n	8001994 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	781a      	ldrb	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d034      	beq.n	8001940 <HAL_I2C_Master_Transmit+0x184>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d130      	bne.n	8001940 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	2200      	movs	r2, #0
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f986 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e04d      	b.n	8001994 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d90e      	bls.n	8001920 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	22ff      	movs	r2, #255	; 0xff
 8001906:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190c:	b2da      	uxtb	r2, r3
 800190e:	8979      	ldrh	r1, [r7, #10]
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 fb17 	bl	8001f4c <I2C_TransferConfig>
 800191e:	e00f      	b.n	8001940 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	b2da      	uxtb	r2, r3
 8001930:	8979      	ldrh	r1, [r7, #10]
 8001932:	2300      	movs	r3, #0
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 fb06 	bl	8001f4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001944:	b29b      	uxth	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d19e      	bne.n	8001888 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	6a39      	ldr	r1, [r7, #32]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f9d3 	bl	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e01a      	b.n	8001994 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2220      	movs	r2, #32
 8001964:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001972:	400b      	ands	r3, r1
 8001974:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2220      	movs	r2, #32
 800197a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001992:	2302      	movs	r3, #2
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	80002000 	.word	0x80002000
 80019a0:	fe00e800 	.word	0xfe00e800

080019a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	460b      	mov	r3, r1
 80019b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	f040 80f1 	bne.w	8001ba8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d4:	d101      	bne.n	80019da <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0e7      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2C_IsDeviceReady+0x44>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0e0      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_I2C_IsDeviceReady+0x72>
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a14:	e004      	b.n	8001a20 <HAL_I2C_IsDeviceReady+0x7c>
 8001a16:	897b      	ldrh	r3, [r7, #10]
 8001a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb41 	bl	80010ac <HAL_GetTick>
 8001a2a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	bf0c      	ite	eq
 8001a3a:	2301      	moveq	r3, #1
 8001a3c:	2300      	movne	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a58:	e034      	b.n	8001ac4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d01a      	beq.n	8001a98 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a62:	f7ff fb23 	bl	80010ac <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d302      	bcc.n	8001a78 <HAL_I2C_IsDeviceReady+0xd4>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10f      	bne.n	8001a98 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e088      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <HAL_I2C_IsDeviceReady+0x12c>
 8001aca:	7fbb      	ldrb	r3, [r7, #30]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0c4      	beq.n	8001a5a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d01a      	beq.n	8001b14 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f886 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e058      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2220      	movs	r2, #32
 8001afe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e04a      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f86b 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e03d      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2210      	movs	r2, #16
 8001b34:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d118      	bne.n	8001b78 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b54:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2120      	movs	r1, #32
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f84a 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e01c      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2220      	movs	r2, #32
 8001b76:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	f63f af3b 	bhi.w	80019fe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	f043 0220 	orr.w	r2, r3, #32
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d103      	bne.n	8001bd0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d007      	beq.n	8001bee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	619a      	str	r2, [r3, #24]
  }
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c0a:	e022      	b.n	8001c52 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d01e      	beq.n	8001c52 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c14:	f7ff fa4a 	bl	80010ac <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d302      	bcc.n	8001c2a <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d113      	bne.n	8001c52 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f043 0220 	orr.w	r2, r3, #32
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d0cd      	beq.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c86:	e02c      	b.n	8001ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f871 	bl	8001d74 <I2C_IsErrorOccurred>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e02a      	b.n	8001cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d01e      	beq.n	8001ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca4:	f7ff fa02 	bl	80010ac <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d302      	bcc.n	8001cba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d113      	bne.n	8001ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f043 0220 	orr.w	r2, r3, #32
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e007      	b.n	8001cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d1cb      	bne.n	8001c88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d06:	e028      	b.n	8001d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f831 	bl	8001d74 <I2C_IsErrorOccurred>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e026      	b.n	8001d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1c:	f7ff f9c6 	bl	80010ac <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d302      	bcc.n	8001d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d113      	bne.n	8001d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e007      	b.n	8001d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d1cf      	bne.n	8001d08 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0310 	and.w	r3, r3, #16
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d075      	beq.n	8001e8c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2210      	movs	r2, #16
 8001da6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001da8:	e056      	b.n	8001e58 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db0:	d052      	beq.n	8001e58 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db2:	f7ff f97b 	bl	80010ac <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d302      	bcc.n	8001dc8 <I2C_IsErrorOccurred+0x54>
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d147      	bne.n	8001e58 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001dda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dea:	d12e      	bne.n	8001e4a <I2C_IsErrorOccurred+0xd6>
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df2:	d02a      	beq.n	8001e4a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d027      	beq.n	8001e4a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e0a:	f7ff f94f 	bl	80010ac <HAL_GetTick>
 8001e0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e10:	e01b      	b.n	8001e4a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e12:	f7ff f94b 	bl	80010ac <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b19      	cmp	r3, #25
 8001e1e:	d914      	bls.n	8001e4a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e24:	f043 0220 	orr.w	r2, r3, #32
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d1dc      	bne.n	8001e12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b20      	cmp	r3, #32
 8001e64:	d003      	beq.n	8001e6e <I2C_IsErrorOccurred+0xfa>
 8001e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d09d      	beq.n	8001daa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00b      	beq.n	8001ed8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	f043 0308 	orr.w	r3, r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ed0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01c      	beq.n	8001f3c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f7ff fe55 	bl	8001bb2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <I2C_IsErrorOccurred+0x1d4>)
 8001f14:	400b      	ands	r3, r1
 8001f16:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3728      	adds	r7, #40	; 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	fe00e800 	.word	0xfe00e800

08001f4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	817b      	strh	r3, [r7, #10]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f5e:	897b      	ldrh	r3, [r7, #10]
 8001f60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f64:	7a7b      	ldrb	r3, [r7, #9]
 8001f66:	041b      	lsls	r3, r3, #16
 8001f68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	0d5b      	lsrs	r3, r3, #21
 8001f86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <I2C_TransferConfig+0x60>)
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	ea02 0103 	and.w	r1, r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f9e:	bf00      	nop
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	03ff63ff 	.word	0x03ff63ff

08001fb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b20      	cmp	r3, #32
 8001fc4:	d138      	bne.n	8002038 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e032      	b.n	800203a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002002:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6819      	ldr	r1, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002046:	b480      	push	{r7}
 8002048:	b085      	sub	sp, #20
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b20      	cmp	r3, #32
 800205a:	d139      	bne.n	80020d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002066:	2302      	movs	r3, #2
 8002068:	e033      	b.n	80020d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2224      	movs	r2, #36	; 0x24
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0201 	bic.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002098:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e000      	b.n	80020d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020d0:	2302      	movs	r3, #2
  }
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40007000 	.word	0x40007000

080020fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210a:	d130      	bne.n	800216e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002118:	d038      	beq.n	800218c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002122:	4a1e      	ldr	r2, [pc, #120]	; (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002128:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2232      	movs	r2, #50	; 0x32
 8002130:	fb02 f303 	mul.w	r3, r2, r3
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9b      	lsrs	r3, r3, #18
 800213c:	3301      	adds	r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002140:	e002      	b.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3b01      	subs	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002154:	d102      	bne.n	800215c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f2      	bne.n	8002142 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002168:	d110      	bne.n	800218c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e00f      	b.n	800218e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217a:	d007      	beq.n	800218c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800217c:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002184:	4a05      	ldr	r2, [pc, #20]	; (800219c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40007000 	.word	0x40007000
 80021a0:	20000008 	.word	0x20000008
 80021a4:	431bde83 	.word	0x431bde83

080021a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e3ca      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ba:	4b97      	ldr	r3, [pc, #604]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c4:	4b94      	ldr	r3, [pc, #592]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80e4 	beq.w	80023a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d007      	beq.n	80021f2 <HAL_RCC_OscConfig+0x4a>
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	f040 808b 	bne.w	8002300 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	f040 8087 	bne.w	8002300 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f2:	4b89      	ldr	r3, [pc, #548]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_RCC_OscConfig+0x62>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e3a2      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	4b82      	ldr	r3, [pc, #520]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <HAL_RCC_OscConfig+0x7c>
 800221a:	4b7f      	ldr	r3, [pc, #508]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002222:	e005      	b.n	8002230 <HAL_RCC_OscConfig+0x88>
 8002224:	4b7c      	ldr	r3, [pc, #496]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002230:	4293      	cmp	r3, r2
 8002232:	d223      	bcs.n	800227c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fd1d 	bl	8002c78 <RCC_SetFlashLatencyFromMSIRange>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e383      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002248:	4b73      	ldr	r3, [pc, #460]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a72      	ldr	r2, [pc, #456]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	4b70      	ldr	r3, [pc, #448]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	496d      	ldr	r1, [pc, #436]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002266:	4b6c      	ldr	r3, [pc, #432]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	4968      	ldr	r1, [pc, #416]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
 800227a:	e025      	b.n	80022c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227c:	4b66      	ldr	r3, [pc, #408]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a65      	ldr	r2, [pc, #404]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4960      	ldr	r1, [pc, #384]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229a:	4b5f      	ldr	r3, [pc, #380]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	495b      	ldr	r1, [pc, #364]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fcdd 	bl	8002c78 <RCC_SetFlashLatencyFromMSIRange>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e343      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c8:	f000 fc4a 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b52      	ldr	r3, [pc, #328]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	4950      	ldr	r1, [pc, #320]	; (800241c <HAL_RCC_OscConfig+0x274>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	4a4e      	ldr	r2, [pc, #312]	; (8002420 <HAL_RCC_OscConfig+0x278>)
 80022e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022e8:	4b4e      	ldr	r3, [pc, #312]	; (8002424 <HAL_RCC_OscConfig+0x27c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fe8d 	bl	800100c <HAL_InitTick>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d052      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	e327      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d032      	beq.n	800236e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002308:	4b43      	ldr	r3, [pc, #268]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a42      	ldr	r2, [pc, #264]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002314:	f7fe feca 	bl	80010ac <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800231c:	f7fe fec6 	bl	80010ac <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e310      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800232e:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a36      	ldr	r2, [pc, #216]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4931      	ldr	r1, [pc, #196]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002358:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	492c      	ldr	r1, [pc, #176]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
 800236c:	e01a      	b.n	80023a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800236e:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a29      	ldr	r2, [pc, #164]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800237a:	f7fe fe97 	bl	80010ac <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002382:	f7fe fe93 	bl	80010ac <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e2dd      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002394:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x1da>
 80023a0:	e000      	b.n	80023a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d074      	beq.n	800249a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d005      	beq.n	80023c2 <HAL_RCC_OscConfig+0x21a>
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	d10e      	bne.n	80023da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d10b      	bne.n	80023da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d064      	beq.n	8002498 <HAL_RCC_OscConfig+0x2f0>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d160      	bne.n	8002498 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e2ba      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x24a>
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e026      	b.n	8002440 <HAL_RCC_OscConfig+0x298>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fa:	d115      	bne.n	8002428 <HAL_RCC_OscConfig+0x280>
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a05      	ldr	r2, [pc, #20]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 8002402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b03      	ldr	r3, [pc, #12]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a02      	ldr	r2, [pc, #8]	; (8002418 <HAL_RCC_OscConfig+0x270>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e014      	b.n	8002440 <HAL_RCC_OscConfig+0x298>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	08003eb8 	.word	0x08003eb8
 8002420:	20000008 	.word	0x20000008
 8002424:	2000000c 	.word	0x2000000c
 8002428:	4ba0      	ldr	r3, [pc, #640]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a9f      	ldr	r2, [pc, #636]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b9d      	ldr	r3, [pc, #628]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a9c      	ldr	r2, [pc, #624]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fe30 	bl	80010ac <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fe2c 	bl	80010ac <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e276      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002462:	4b92      	ldr	r3, [pc, #584]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x2a8>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fe1c 	bl	80010ac <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fe18 	bl	80010ac <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e262      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248a:	4b88      	ldr	r3, [pc, #544]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x2d0>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d060      	beq.n	8002568 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_OscConfig+0x310>
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b0c      	cmp	r3, #12
 80024b0:	d119      	bne.n	80024e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d116      	bne.n	80024e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b8:	4b7c      	ldr	r3, [pc, #496]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_OscConfig+0x328>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e23f      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b76      	ldr	r3, [pc, #472]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	4973      	ldr	r1, [pc, #460]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e4:	e040      	b.n	8002568 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d023      	beq.n	8002536 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ee:	4b6f      	ldr	r3, [pc, #444]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6e      	ldr	r2, [pc, #440]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80024f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7fe fdd7 	bl	80010ac <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002502:	f7fe fdd3 	bl	80010ac <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e21d      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002514:	4b65      	ldr	r3, [pc, #404]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002520:	4b62      	ldr	r3, [pc, #392]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	495f      	ldr	r1, [pc, #380]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002530:	4313      	orrs	r3, r2
 8002532:	604b      	str	r3, [r1, #4]
 8002534:	e018      	b.n	8002568 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002536:	4b5d      	ldr	r3, [pc, #372]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a5c      	ldr	r2, [pc, #368]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800253c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7fe fdb3 	bl	80010ac <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254a:	f7fe fdaf 	bl	80010ac <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e1f9      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d03c      	beq.n	80025ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01c      	beq.n	80025b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002582:	4a4a      	ldr	r2, [pc, #296]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7fe fd8e 	bl	80010ac <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7fe fd8a 	bl	80010ac <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e1d4      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80025a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ef      	beq.n	8002594 <HAL_RCC_OscConfig+0x3ec>
 80025b4:	e01b      	b.n	80025ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80025b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025bc:	4a3b      	ldr	r2, [pc, #236]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	f7fe fd71 	bl	80010ac <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ce:	f7fe fd6d 	bl	80010ac <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1b7      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e0:	4b32      	ldr	r3, [pc, #200]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1ef      	bne.n	80025ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80a6 	beq.w	8002748 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002600:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10d      	bne.n	8002628 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4a26      	ldr	r2, [pc, #152]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002616:	6593      	str	r3, [r2, #88]	; 0x58
 8002618:	4b24      	ldr	r3, [pc, #144]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002624:	2301      	movs	r3, #1
 8002626:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002628:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_RCC_OscConfig+0x508>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d118      	bne.n	8002666 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002634:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_RCC_OscConfig+0x508>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <HAL_RCC_OscConfig+0x508>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002640:	f7fe fd34 	bl	80010ac <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002648:	f7fe fd30 	bl	80010ac <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e17a      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <HAL_RCC_OscConfig+0x508>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d108      	bne.n	8002680 <HAL_RCC_OscConfig+0x4d8>
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267e:	e029      	b.n	80026d4 <HAL_RCC_OscConfig+0x52c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d115      	bne.n	80026b4 <HAL_RCC_OscConfig+0x50c>
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_RCC_OscConfig+0x504>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x52c>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40007000 	.word	0x40007000
 80026b4:	4b9c      	ldr	r3, [pc, #624]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	4a9b      	ldr	r2, [pc, #620]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026c4:	4b98      	ldr	r3, [pc, #608]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	4a97      	ldr	r2, [pc, #604]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d016      	beq.n	800270a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fe fce6 	bl	80010ac <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7fe fce2 	bl	80010ac <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e12a      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fa:	4b8b      	ldr	r3, [pc, #556]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0ed      	beq.n	80026e4 <HAL_RCC_OscConfig+0x53c>
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270a:	f7fe fccf 	bl	80010ac <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fccb 	bl	80010ac <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e113      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002728:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1ed      	bne.n	8002712 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002736:	7ffb      	ldrb	r3, [r7, #31]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800273c:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	4a79      	ldr	r2, [pc, #484]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 8002742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002746:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80fe 	beq.w	800294e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	2b02      	cmp	r3, #2
 8002758:	f040 80d0 	bne.w	80028fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800275c:	4b72      	ldr	r3, [pc, #456]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0203 	and.w	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	429a      	cmp	r2, r3
 800276e:	d130      	bne.n	80027d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	3b01      	subs	r3, #1
 800277c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d127      	bne.n	80027d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11f      	bne.n	80027d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800279c:	2a07      	cmp	r2, #7
 800279e:	bf14      	ite	ne
 80027a0:	2201      	movne	r2, #1
 80027a2:	2200      	moveq	r2, #0
 80027a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d113      	bne.n	80027d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	3b01      	subs	r3, #1
 80027b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	3b01      	subs	r3, #1
 80027cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d06e      	beq.n	80028b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b0c      	cmp	r3, #12
 80027d6:	d069      	beq.n	80028ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027e4:	4b50      	ldr	r3, [pc, #320]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0ad      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027f4:	4b4c      	ldr	r3, [pc, #304]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4b      	ldr	r2, [pc, #300]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80027fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002800:	f7fe fc54 	bl	80010ac <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fc50 	bl	80010ac <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e09a      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281a:	4b43      	ldr	r3, [pc, #268]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	4b40      	ldr	r3, [pc, #256]	; (800292c <HAL_RCC_OscConfig+0x784>)
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002836:	3a01      	subs	r2, #1
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	4311      	orrs	r1, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002840:	0212      	lsls	r2, r2, #8
 8002842:	4311      	orrs	r1, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002848:	0852      	lsrs	r2, r2, #1
 800284a:	3a01      	subs	r2, #1
 800284c:	0552      	lsls	r2, r2, #21
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002854:	0852      	lsrs	r2, r2, #1
 8002856:	3a01      	subs	r2, #1
 8002858:	0652      	lsls	r2, r2, #25
 800285a:	4311      	orrs	r1, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002860:	0912      	lsrs	r2, r2, #4
 8002862:	0452      	lsls	r2, r2, #17
 8002864:	430a      	orrs	r2, r1
 8002866:	4930      	ldr	r1, [pc, #192]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 8002868:	4313      	orrs	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800286c:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2d      	ldr	r2, [pc, #180]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 8002872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002876:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a2a      	ldr	r2, [pc, #168]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002882:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002884:	f7fe fc12 	bl	80010ac <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe fc0e 	bl	80010ac <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e058      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289e:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028aa:	e050      	b.n	800294e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e04f      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d148      	bne.n	800294e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a19      	ldr	r2, [pc, #100]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a16      	ldr	r2, [pc, #88]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d4:	f7fe fbea 	bl	80010ac <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fbe6 	bl	80010ac <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e030      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0x734>
 80028fa:	e028      	b.n	800294e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d023      	beq.n	800294a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a08      	ldr	r2, [pc, #32]	; (8002928 <HAL_RCC_OscConfig+0x780>)
 8002908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fbcd 	bl	80010ac <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002914:	e00c      	b.n	8002930 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fbc9 	bl	80010ac <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d905      	bls.n	8002930 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e013      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
 8002928:	40021000 	.word	0x40021000
 800292c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_RCC_OscConfig+0x7b0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ec      	bne.n	8002916 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_OscConfig+0x7b0>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4905      	ldr	r1, [pc, #20]	; (8002958 <HAL_RCC_OscConfig+0x7b0>)
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_RCC_OscConfig+0x7b4>)
 8002944:	4013      	ands	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
 8002948:	e001      	b.n	800294e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	feeefffc 	.word	0xfeeefffc

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0e7      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b75      	ldr	r3, [pc, #468]	; (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d910      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b72      	ldr	r3, [pc, #456]	; (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 0207 	bic.w	r2, r3, #7
 800298a:	4970      	ldr	r1, [pc, #448]	; (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b6e      	ldr	r3, [pc, #440]	; (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0cf      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029bc:	429a      	cmp	r2, r3
 80029be:	d908      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4960      	ldr	r1, [pc, #384]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04c      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	4b5a      	ldr	r3, [pc, #360]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d121      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0a6      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fe:	4b54      	ldr	r3, [pc, #336]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e09a      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a16:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e08e      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e086      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4943      	ldr	r1, [pc, #268]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a48:	f7fe fb30 	bl	80010ac <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fb2c 	bl	80010ac <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e06e      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d010      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d208      	bcs.n	8002aa6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b2e      	ldr	r3, [pc, #184]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	492b      	ldr	r1, [pc, #172]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d210      	bcs.n	8002ad6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 0207 	bic.w	r2, r3, #7
 8002abc:	4923      	ldr	r1, [pc, #140]	; (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac4:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e036      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	4918      	ldr	r1, [pc, #96]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4910      	ldr	r1, [pc, #64]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b14:	f000 f824 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	490b      	ldr	r1, [pc, #44]	; (8002b54 <HAL_RCC_ClockConfig+0x1f4>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b30:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1fc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe fa67 	bl	800100c <HAL_InitTick>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b42:	7afb      	ldrb	r3, [r7, #11]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40021000 	.word	0x40021000
 8002b54:	08003eb8 	.word	0x08003eb8
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b78:	4b3b      	ldr	r3, [pc, #236]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d121      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d11e      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b94:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ba0:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e005      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d102      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd8:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e004      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be4:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002be6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d134      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d003      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xac>
 8002c04:	e005      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c08:	617b      	str	r3, [r7, #20]
      break;
 8002c0a:	e005      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c0e:	617b      	str	r3, [r7, #20]
      break;
 8002c10:	e002      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	617b      	str	r3, [r7, #20]
      break;
 8002c16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	3301      	adds	r3, #1
 8002c24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	fb03 f202 	mul.w	r2, r3, r2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	0e5b      	lsrs	r3, r3, #25
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c58:	69bb      	ldr	r3, [r7, #24]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	08003ec8 	.word	0x08003ec8
 8002c70:	00f42400 	.word	0x00f42400
 8002c74:	007a1200 	.word	0x007a1200

08002c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c84:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c90:	f7ff fa26 	bl	80020e0 <HAL_PWREx_GetVoltageRange>
 8002c94:	6178      	str	r0, [r7, #20]
 8002c96:	e014      	b.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	4a24      	ldr	r2, [pc, #144]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ca4:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cb0:	f7ff fa16 	bl	80020e0 <HAL_PWREx_GetVoltageRange>
 8002cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc8:	d10b      	bne.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b80      	cmp	r3, #128	; 0x80
 8002cce:	d919      	bls.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2ba0      	cmp	r3, #160	; 0xa0
 8002cd4:	d902      	bls.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	e013      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cdc:	2301      	movs	r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	e010      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b80      	cmp	r3, #128	; 0x80
 8002ce6:	d902      	bls.n	8002cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ce8:	2303      	movs	r3, #3
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	e00a      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b80      	cmp	r3, #128	; 0x80
 8002cf2:	d102      	bne.n	8002cfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	e004      	b.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b70      	cmp	r3, #112	; 0x70
 8002cfe:	d101      	bne.n	8002d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d00:	2301      	movs	r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 0207 	bic.w	r2, r3, #7
 8002d0c:	4909      	ldr	r1, [pc, #36]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d001      	beq.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40022000 	.word	0x40022000

08002d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d40:	2300      	movs	r3, #0
 8002d42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d44:	2300      	movs	r3, #0
 8002d46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d041      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d5c:	d02a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d62:	d824      	bhi.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d68:	d008      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d6e:	d81e      	bhi.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d78:	d010      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d7a:	e018      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d7c:	4b86      	ldr	r3, [pc, #536]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a85      	ldr	r2, [pc, #532]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d88:	e015      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fabb 	bl	800330c <RCCEx_PLLSAI1_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d9a:	e00c      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3320      	adds	r3, #32
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fba6 	bl	80034f4 <RCCEx_PLLSAI2_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dac:	e003      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	74fb      	strb	r3, [r7, #19]
      break;
 8002db2:	e000      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dbc:	4b76      	ldr	r3, [pc, #472]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dca:	4973      	ldr	r1, [pc, #460]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dd2:	e001      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d041      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002de8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dec:	d02a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002dee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002df2:	d824      	bhi.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dfe:	d81e      	bhi.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d010      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e0a:	e018      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e0c:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a61      	ldr	r2, [pc, #388]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e18:	e015      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fa73 	bl	800330c <RCCEx_PLLSAI1_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e2a:	e00c      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3320      	adds	r3, #32
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 fb5e 	bl	80034f4 <RCCEx_PLLSAI2_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e3c:	e003      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	74fb      	strb	r3, [r7, #19]
      break;
 8002e42:	e000      	b.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e46:	7cfb      	ldrb	r3, [r7, #19]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10b      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e4c:	4b52      	ldr	r3, [pc, #328]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e5a:	494f      	ldr	r1, [pc, #316]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e62:	e001      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e64:	7cfb      	ldrb	r3, [r7, #19]
 8002e66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a0 	beq.w	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e76:	2300      	movs	r3, #0
 8002e78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e7a:	4b47      	ldr	r3, [pc, #284]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e90:	4b41      	ldr	r3, [pc, #260]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	4a40      	ldr	r2, [pc, #256]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e9c:	4b3e      	ldr	r3, [pc, #248]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002eac:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a3a      	ldr	r2, [pc, #232]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eb8:	f7fe f8f8 	bl	80010ac <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ebe:	e009      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec0:	f7fe f8f4 	bl	80010ac <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d902      	bls.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ed4:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ef      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ee0:	7cfb      	ldrb	r3, [r7, #19]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d15c      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ee6:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d01f      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d019      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f04:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f10:	4b21      	ldr	r3, [pc, #132]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	4a20      	ldr	r2, [pc, #128]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f30:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fe f8b3 	bl	80010ac <HAL_GetTick>
 8002f46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f48:	e00b      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe f8af 	bl	80010ac <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d902      	bls.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	74fb      	strb	r3, [r7, #19]
            break;
 8002f60:	e006      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f62:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ec      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f86:	4904      	ldr	r1, [pc, #16]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f8e:	e009      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f90:	7cfb      	ldrb	r3, [r7, #19]
 8002f92:	74bb      	strb	r3, [r7, #18]
 8002f94:	e006      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa4:	7c7b      	ldrb	r3, [r7, #17]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d105      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002faa:	4b9e      	ldr	r3, [pc, #632]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	4a9d      	ldr	r2, [pc, #628]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fc2:	4b98      	ldr	r3, [pc, #608]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc8:	f023 0203 	bic.w	r2, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd0:	4994      	ldr	r1, [pc, #592]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fe4:	4b8f      	ldr	r3, [pc, #572]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f023 020c 	bic.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	498c      	ldr	r1, [pc, #560]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003006:	4b87      	ldr	r3, [pc, #540]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	4983      	ldr	r1, [pc, #524]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003028:	4b7e      	ldr	r3, [pc, #504]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	497b      	ldr	r1, [pc, #492]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800304a:	4b76      	ldr	r3, [pc, #472]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003058:	4972      	ldr	r1, [pc, #456]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800306c:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003072:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	496a      	ldr	r1, [pc, #424]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800308e:	4b65      	ldr	r3, [pc, #404]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	4961      	ldr	r1, [pc, #388]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030b0:	4b5c      	ldr	r3, [pc, #368]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030be:	4959      	ldr	r1, [pc, #356]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030d2:	4b54      	ldr	r3, [pc, #336]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e0:	4950      	ldr	r1, [pc, #320]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030f4:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	4948      	ldr	r1, [pc, #288]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003116:	4b43      	ldr	r3, [pc, #268]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	493f      	ldr	r1, [pc, #252]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d028      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003138:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003146:	4937      	ldr	r1, [pc, #220]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003156:	d106      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4a31      	ldr	r2, [pc, #196]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003162:	60d3      	str	r3, [r2, #12]
 8003164:	e011      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800316e:	d10c      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3304      	adds	r3, #4
 8003174:	2101      	movs	r1, #1
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f8c8 	bl	800330c <RCCEx_PLLSAI1_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003180:	7cfb      	ldrb	r3, [r7, #19]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003186:	7cfb      	ldrb	r3, [r7, #19]
 8003188:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d028      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003196:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	491f      	ldr	r1, [pc, #124]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b4:	d106      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	4a1a      	ldr	r2, [pc, #104]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c0:	60d3      	str	r3, [r2, #12]
 80031c2:	e011      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2101      	movs	r1, #1
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 f899 	bl	800330c <RCCEx_PLLSAI1_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031de:	7cfb      	ldrb	r3, [r7, #19]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d02b      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003212:	d109      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a02      	ldr	r2, [pc, #8]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800321e:	60d3      	str	r3, [r2, #12]
 8003220:	e014      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003230:	d10c      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	2101      	movs	r1, #1
 8003238:	4618      	mov	r0, r3
 800323a:	f000 f867 	bl	800330c <RCCEx_PLLSAI1_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02f      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003266:	4928      	ldr	r1, [pc, #160]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003276:	d10d      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f844 	bl	800330c <RCCEx_PLLSAI1_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d014      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	74bb      	strb	r3, [r7, #18]
 8003292:	e011      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329c:	d10c      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3320      	adds	r3, #32
 80032a2:	2102      	movs	r1, #2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 f925 	bl	80034f4 <RCCEx_PLLSAI2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ae:	7cfb      	ldrb	r3, [r7, #19]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032c4:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d2:	490d      	ldr	r1, [pc, #52]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f6:	4904      	ldr	r1, [pc, #16]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40021000 	.word	0x40021000

0800330c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800331a:	4b75      	ldr	r3, [pc, #468]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d018      	beq.n	8003358 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003326:	4b72      	ldr	r3, [pc, #456]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0203 	and.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d10d      	bne.n	8003352 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
       ||
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800333e:	4b6c      	ldr	r3, [pc, #432]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
       ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d047      	beq.n	80033e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	e044      	b.n	80033e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d018      	beq.n	8003392 <RCCEx_PLLSAI1_Config+0x86>
 8003360:	2b03      	cmp	r3, #3
 8003362:	d825      	bhi.n	80033b0 <RCCEx_PLLSAI1_Config+0xa4>
 8003364:	2b01      	cmp	r3, #1
 8003366:	d002      	beq.n	800336e <RCCEx_PLLSAI1_Config+0x62>
 8003368:	2b02      	cmp	r3, #2
 800336a:	d009      	beq.n	8003380 <RCCEx_PLLSAI1_Config+0x74>
 800336c:	e020      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800336e:	4b60      	ldr	r3, [pc, #384]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d11d      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337e:	e01a      	b.n	80033b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003380:	4b5b      	ldr	r3, [pc, #364]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d116      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003390:	e013      	b.n	80033ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003392:	4b57      	ldr	r3, [pc, #348]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10f      	bne.n	80033be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800339e:	4b54      	ldr	r3, [pc, #336]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033ae:	e006      	b.n	80033be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e004      	b.n	80033c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033b6:	bf00      	nop
 80033b8:	e002      	b.n	80033c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ba:	bf00      	nop
 80033bc:	e000      	b.n	80033c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033be:	bf00      	nop
    }

    if(status == HAL_OK)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10d      	bne.n	80033e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033c6:	4b4a      	ldr	r3, [pc, #296]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6819      	ldr	r1, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	430b      	orrs	r3, r1
 80033dc:	4944      	ldr	r1, [pc, #272]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d17d      	bne.n	80034e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033e8:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a40      	ldr	r2, [pc, #256]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f4:	f7fd fe5a 	bl	80010ac <HAL_GetTick>
 80033f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033fa:	e009      	b.n	8003410 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033fc:	f7fd fe56 	bl	80010ac <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d902      	bls.n	8003410 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	73fb      	strb	r3, [r7, #15]
        break;
 800340e:	e005      	b.n	800341c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003410:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1ef      	bne.n	80033fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d160      	bne.n	80034e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d111      	bne.n	800344c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6892      	ldr	r2, [r2, #8]
 8003438:	0211      	lsls	r1, r2, #8
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	0912      	lsrs	r2, r2, #4
 8003440:	0452      	lsls	r2, r2, #17
 8003442:	430a      	orrs	r2, r1
 8003444:	492a      	ldr	r1, [pc, #168]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	610b      	str	r3, [r1, #16]
 800344a:	e027      	b.n	800349c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d112      	bne.n	8003478 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003452:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800345a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6892      	ldr	r2, [r2, #8]
 8003462:	0211      	lsls	r1, r2, #8
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6912      	ldr	r2, [r2, #16]
 8003468:	0852      	lsrs	r2, r2, #1
 800346a:	3a01      	subs	r2, #1
 800346c:	0552      	lsls	r2, r2, #21
 800346e:	430a      	orrs	r2, r1
 8003470:	491f      	ldr	r1, [pc, #124]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	610b      	str	r3, [r1, #16]
 8003476:	e011      	b.n	800349c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003480:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	0211      	lsls	r1, r2, #8
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6952      	ldr	r2, [r2, #20]
 800348e:	0852      	lsrs	r2, r2, #1
 8003490:	3a01      	subs	r2, #1
 8003492:	0652      	lsls	r2, r2, #25
 8003494:	430a      	orrs	r2, r1
 8003496:	4916      	ldr	r1, [pc, #88]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800349c:	4b14      	ldr	r3, [pc, #80]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fd fe00 	bl	80010ac <HAL_GetTick>
 80034ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034ae:	e009      	b.n	80034c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b0:	f7fd fdfc 	bl	80010ac <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d902      	bls.n	80034c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	73fb      	strb	r3, [r7, #15]
          break;
 80034c2:	e005      	b.n	80034d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034c4:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ef      	beq.n	80034b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034d6:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	4904      	ldr	r1, [pc, #16]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000

080034f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003502:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800350e:	4b67      	ldr	r3, [pc, #412]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 0203 	and.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d10d      	bne.n	800353a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
       ||
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003526:	4b61      	ldr	r3, [pc, #388]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
       ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d047      	beq.n	80035ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	e044      	b.n	80035ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d018      	beq.n	800357a <RCCEx_PLLSAI2_Config+0x86>
 8003548:	2b03      	cmp	r3, #3
 800354a:	d825      	bhi.n	8003598 <RCCEx_PLLSAI2_Config+0xa4>
 800354c:	2b01      	cmp	r3, #1
 800354e:	d002      	beq.n	8003556 <RCCEx_PLLSAI2_Config+0x62>
 8003550:	2b02      	cmp	r3, #2
 8003552:	d009      	beq.n	8003568 <RCCEx_PLLSAI2_Config+0x74>
 8003554:	e020      	b.n	8003598 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003556:	4b55      	ldr	r3, [pc, #340]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11d      	bne.n	800359e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003566:	e01a      	b.n	800359e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d116      	bne.n	80035a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e013      	b.n	80035a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800357a:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10f      	bne.n	80035a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003586:	4b49      	ldr	r3, [pc, #292]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003596:	e006      	b.n	80035a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
      break;
 800359c:	e004      	b.n	80035a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800359e:	bf00      	nop
 80035a0:	e002      	b.n	80035a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10d      	bne.n	80035ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035ae:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	3b01      	subs	r3, #1
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	430b      	orrs	r3, r1
 80035c4:	4939      	ldr	r1, [pc, #228]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d167      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035d0:	4b36      	ldr	r3, [pc, #216]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a35      	ldr	r2, [pc, #212]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035dc:	f7fd fd66 	bl	80010ac <HAL_GetTick>
 80035e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035e2:	e009      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035e4:	f7fd fd62 	bl	80010ac <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d902      	bls.n	80035f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	73fb      	strb	r3, [r7, #15]
        break;
 80035f6:	e005      	b.n	8003604 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035f8:	4b2c      	ldr	r3, [pc, #176]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ef      	bne.n	80035e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d14a      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d111      	bne.n	8003634 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003610:	4b26      	ldr	r3, [pc, #152]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6892      	ldr	r2, [r2, #8]
 8003620:	0211      	lsls	r1, r2, #8
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68d2      	ldr	r2, [r2, #12]
 8003626:	0912      	lsrs	r2, r2, #4
 8003628:	0452      	lsls	r2, r2, #17
 800362a:	430a      	orrs	r2, r1
 800362c:	491f      	ldr	r1, [pc, #124]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	614b      	str	r3, [r1, #20]
 8003632:	e011      	b.n	8003658 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800363c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6892      	ldr	r2, [r2, #8]
 8003644:	0211      	lsls	r1, r2, #8
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6912      	ldr	r2, [r2, #16]
 800364a:	0852      	lsrs	r2, r2, #1
 800364c:	3a01      	subs	r2, #1
 800364e:	0652      	lsls	r2, r2, #25
 8003650:	430a      	orrs	r2, r1
 8003652:	4916      	ldr	r1, [pc, #88]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003654:	4313      	orrs	r3, r2
 8003656:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003658:	4b14      	ldr	r3, [pc, #80]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a13      	ldr	r2, [pc, #76]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800365e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003662:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fd fd22 	bl	80010ac <HAL_GetTick>
 8003668:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800366a:	e009      	b.n	8003680 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800366c:	f7fd fd1e 	bl	80010ac <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d902      	bls.n	8003680 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	73fb      	strb	r3, [r7, #15]
          break;
 800367e:	e005      	b.n	800368c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ef      	beq.n	800366c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	4904      	ldr	r1, [pc, #16]	; (80036ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800369c:	4313      	orrs	r3, r2
 800369e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000

080036b0 <__libc_init_array>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4d0d      	ldr	r5, [pc, #52]	; (80036e8 <__libc_init_array+0x38>)
 80036b4:	4c0d      	ldr	r4, [pc, #52]	; (80036ec <__libc_init_array+0x3c>)
 80036b6:	1b64      	subs	r4, r4, r5
 80036b8:	10a4      	asrs	r4, r4, #2
 80036ba:	2600      	movs	r6, #0
 80036bc:	42a6      	cmp	r6, r4
 80036be:	d109      	bne.n	80036d4 <__libc_init_array+0x24>
 80036c0:	4d0b      	ldr	r5, [pc, #44]	; (80036f0 <__libc_init_array+0x40>)
 80036c2:	4c0c      	ldr	r4, [pc, #48]	; (80036f4 <__libc_init_array+0x44>)
 80036c4:	f000 f820 	bl	8003708 <_init>
 80036c8:	1b64      	subs	r4, r4, r5
 80036ca:	10a4      	asrs	r4, r4, #2
 80036cc:	2600      	movs	r6, #0
 80036ce:	42a6      	cmp	r6, r4
 80036d0:	d105      	bne.n	80036de <__libc_init_array+0x2e>
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d8:	4798      	blx	r3
 80036da:	3601      	adds	r6, #1
 80036dc:	e7ee      	b.n	80036bc <__libc_init_array+0xc>
 80036de:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e2:	4798      	blx	r3
 80036e4:	3601      	adds	r6, #1
 80036e6:	e7f2      	b.n	80036ce <__libc_init_array+0x1e>
 80036e8:	08003ef8 	.word	0x08003ef8
 80036ec:	08003ef8 	.word	0x08003ef8
 80036f0:	08003ef8 	.word	0x08003ef8
 80036f4:	08003efc 	.word	0x08003efc

080036f8 <memset>:
 80036f8:	4402      	add	r2, r0
 80036fa:	4603      	mov	r3, r0
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d100      	bne.n	8003702 <memset+0xa>
 8003700:	4770      	bx	lr
 8003702:	f803 1b01 	strb.w	r1, [r3], #1
 8003706:	e7f9      	b.n	80036fc <memset+0x4>

08003708 <_init>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	bf00      	nop
 800370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370e:	bc08      	pop	{r3}
 8003710:	469e      	mov	lr, r3
 8003712:	4770      	bx	lr

08003714 <_fini>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr
